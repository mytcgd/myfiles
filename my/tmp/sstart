#!/bin/bash

red="\033[1;91m"
green="\e[1;32m"
yellow="\e[1;33m"
purple="\e[1;35m"
red() { echo -e "\e[1;91m$1\033[0m"; }
green() { echo -e "\e[1;32m$1\033[0m"; }
yellow() { echo -e "\e[1;33m$1\033[0m"; }
purple() { echo -e "\e[1;35m$1\033[0m"; }
# reading() { read -p "$(red "$1")" "$2"; }

export CFPORT=${CFPORT:-'8443'}
export CF_IP=${CF_IP:-'ip.sb'}
export FILE_PATH=${FILE_PATH:-'./.tmp'}
export KEEPALIVE=${KEEPALIVE:-'1'}
export OPENSERVER=${OPENSERVER:-'0'}
export SERVER_IP=${SERVER_IP:-''}

export V_PORT=${V_PORT:-''}
export VLPATH=${VLPATH:-'startvl'}

export REAL_PORT=${REAL_PORT:-''}
export SNI=${SNI:-'www.zara.com'}

export HY2_PORT=${HY2_PORT:-''}
export TUIC_PORT=${TUIC_PORT:-''}
export ANYTLS_PORT=${ANYTLS_PORT:-''}

export SOCKS_PORT=${SOCKS_PORT:-''}
export SOCKS_USER=${SOCKS_USER:-''}
export SOCKS_PASS=${SOCKS_PASS:-''}

export SUB_URL=${SUB_URL:-''}
export SUB_NAME=${SUB_NAME:-''}
export MY_DOMAIN=${MY_DOMAIN:-''}
export LOCAL_DOMAIN=${LOCAL_DOMAIN:-''}

export UUID=${UUID:-'7160b696-dd5e-42e3-a024-145e92cec916'}
export NEZHA_VERSION=${NEZHA_VERSION:-'V0'}
export NEZHA_SERVER=${NEZHA_SERVER:-''}
export NEZHA_KEY=${NEZHA_KEY:-''}
export NEZHA_PORT=${NEZHA_PORT:-'443'}

export ARGO_DOMAIN=${ARGO_DOMAIN:-''}
export ARGO_AUTH=${ARGO_AUTH:-''}

# 建立运行目录
createfolder() {
  if [ ! -d "$FILE_PATH" ]; then
    mkdir -p "${FILE_PATH}"
  fi
}

# 清理历史文件
cleanup_files() {
  rm -rf ${FILE_PATH}/*
  mkdir -p "${FILE_PATH}/sconf"
}

# 设置下载
download_program() {
  local program_name="$1"
  local default_url="$2"
  local x64_url="$3"

  local download_url
  case "$(uname -m)" in
    x86_64|amd64|x64)
      download_url="${x64_url}"
      ;;
    *)
      download_url="${default_url}"
      ;;
  esac

  if [ ! -f "${program_name}" ]; then
    if [ -n "${download_url}" ]; then
      echo "Downloading ${program_name}..." > /dev/null
      if command -v curl &> /dev/null; then
        curl -sSL "${download_url}" -o "${program_name}"
      elif command -v wget &> /dev/null; then
        wget -qO "${program_name}" "${download_url}"
      fi
      echo "Downloaded ${program_name}" > /dev/null
    else
      echo "Skipping download for ${program_name}" > /dev/null
    fi
  else
    echo "${program_name} already exists, skipping download" > /dev/null
  fi
}

initialize_downloads() {
  if [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ]; then
    case "${NEZHA_VERSION}" in
      "V0" )
        download_program "${FILE_PATH}/npm" "https://github.com/kahunama/myfile/releases/download/main/nezha-agent_arm" "https://github.com/kahunama/myfile/releases/download/main/nezha-agent"
        ;;
      "V1" )
        download_program "${FILE_PATH}/npm" "https://github.com/mytcgd/myfiles/releases/download/main/nezha-agentv1_arm" "https://github.com/mytcgd/myfiles/releases/download/main/nezha-agentv1"
        ;;
    esac
    sleep 3
    chmod +x ${FILE_PATH}/npm
  fi

  download_program "${FILE_PATH}/web" "https://github.com/mytcgd/myfiles/releases/download/main/sing-box_arm" "https://github.com/mytcgd/myfiles/releases/download/main/sing-box"
  sleep 3
  chmod +x ${FILE_PATH}/web

  if [ ${OPENSERVER} -eq 1 ] && [ -n "${V_PORT}" ]; then
    download_program "${FILE_PATH}/argo" "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64" "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
    sleep 3
    chmod +x ${FILE_PATH}/argo
  else
    green "本次安装不使用argo隧道!"
  fi
}

# Generating Configuration Files
my_config() {
  generate_config() {
    if [ "${HY2_PORT}" ] || [ "${TUIC_PORT}" ]; then  # 求或
      openssl ecparam -genkey -name prime256v1 -out "${FILE_PATH}/private.key"
      openssl req -new -x509 -days 3650 -key "${FILE_PATH}/private.key" -out "${FILE_PATH}/cert.pem" -subj "/CN=bing.com"
    fi

    if [ -n "${TUIC_PORT}" ]; then
      export tuicpass=$(< /dev/urandom tr -dc 'A-Za-z0-9' | head -c 24)
    fi

    if [ -n "${REAL_PORT}" ]; then
      output=$(${FILE_PATH}/web generate reality-keypair)
      private_key=$(echo "${output}" | grep -E 'PrivateKey:' | cut -d: -f2- | sed 's/^\s*//' )
      export public_key=$(echo "${output}" | grep -E 'PublicKey:' | cut -d: -f2- | sed 's/^\s*//' )
    fi

    cat > ${FILE_PATH}/sconf/inbound.json << ABC
{
    "log": {
        "disabled": false,
        "level": "info",
        "timestamp": true
    },
    "dns": {
        "servers": [
            {
                "type": "tls",
                "server": "8.8.8.8"
            }
        ]
    }
}
ABC

    if [ -n "${V_PORT}" ]; then
      cat > ${FILE_PATH}/sconf/inbound_w.json << DEF
{
    "inbounds": [
        {
            "type": "vless",
            "tag": "vless-in",
            "listen": "::",
            "listen_port": ${V_PORT},
            "sniff": true,
            "sniff_override_destination": true,
            "users": [
                {
                    "uuid": "${UUID}",
                    "flow": ""
                }
            ],
            "transport": {
                "type": "ws",
                "path": "/${VLPATH}",
                "early_data_header_name": "Sec-WebSocket-Protocol"
            }
        }
    ]
}
DEF
    fi

    if [ -n "${HY2_PORT}" ]; then
      cat > ${FILE_PATH}/sconf/inbound_h.json << GHI
{
    "inbounds": [
        {
            "tag": "hysteria-in",
            "type": "hysteria2",
            "listen":"::",
            "listen_port": ${HY2_PORT},
            "users": [
                {
                    "password": "${UUID}"
                }
            ],
            "masquerade": "https://bing.com",
            "tls": {
                "enabled": true,
                "alpn": [
                    "h3"
                ],
                "certificate_path": "${FILE_PATH}/cert.pem",
                "key_path": "${FILE_PATH}/private.key"
            }
        }
    ]
}
GHI
    fi


    if [ -n "${TUIC_PORT}" ]; then
      cat > ${FILE_PATH}/sconf/inbound_t.json << JKL
{
    "inbounds": [
        {
            "tag": "tuic-in",
            "type": "tuic",
            "listen":"::",
            "listen_port": ${TUIC_PORT},
            "users": [
                {
                    "uuid": "${UUID}",
                    "password": "${tuicpass}"
                }
            ],
            "congestion_control": "bbr",
            "tls": {
                "enabled": true,
                "alpn": [
                    "h3"
                ],
                "certificate_path": "${FILE_PATH}/cert.pem",
                "key_path": "${FILE_PATH}/private.key"
            }
        }
    ]
}
JKL
    fi

    if [ -n "${REAL_PORT}" ]; then
      cat > ${FILE_PATH}/sconf/inbound_r.json << MNO
{
    "inbounds": [
        {
            "tag": "vless-reality-in",
            "type": "vless",
            "listen": "::",
            "listen_port": ${REAL_PORT},
            "users": [
                {
                    "uuid": "${UUID}",
                    "flow": "xtls-rprx-vision"
                }
            ],
            "tls": {
                "enabled": true,
                "server_name": "${SNI}",
                "reality": {
                    "enabled": true,
                    "handshake": {
                        "server": "${SNI}",
                        "server_port": 443
                    },
                    "private_key": "${private_key}",
                    "short_id": [
                        ""
                    ]
                }
            }
        }
    ]
}
MNO
    fi

    if [ -n "${ANYTLS_PORT}" ]; then
      cat > ${FILE_PATH}/sconf/inbound_a.json << PQR
{
    "inbounds": [
        {
            "tag": "anytls-in",
            "type": "anytls",
            "listen": "::",
            "listen_port": ${ANYTLS_PORT},
            "users": [
                {
                    "password": "${UUID}"
                }
            ],
            "padding_scheme": [],
            "tls": {
                "enabled":true,
                "certificate_path": "${FILE_PATH}/cert.pem",
                "key_path": "${FILE_PATH}/private.key"
            }
        }
    ]
}
PQR
    fi

    if [ -n "${SOCKS_PORT}" ] && [ -n "${SOCKS_USER}" ] && [ -n "${SOCKS_PASS}" ]; then
      cat > ${FILE_PATH}/sconf/inbound_s.json << STU
{
    "inbounds": [
        {
            "tag": "socks-in",
            "type": "socks",
            "listen": "::",
            "listen_port": ${SOCKS_PORT},
            "users": [
                {
                    "username": "${SOCKS_USER}",
                    "password": "${SOCKS_PASS}"
                }
            ]
        }
    ]
}
STU
  fi

    cat > ${FILE_PATH}/sconf/outbound.json << VWX
{
    "outbounds": [
        {
            "tag": "direct",
            "type": "direct"
        }
    ],
    "experimental": {
        "cache_file": {
            "enabled": true,
            "path": "${FILE_PATH}/cache.db"
        }
    }
}
VWX
  }

  argo_type() {
    if [ -e "${FILE_PATH}/argo" ] && [ -z "${ARGO_AUTH}" ] && [ -z "${ARGO_DOMAIN}" ]; then
      echo "ARGO_AUTH or ARGO_DOMAIN is empty, use Quick Tunnels" > /dev/null
      return
    fi

    if [ -e "${FILE_PATH}/argo" ] && [ -n "$(echo "${ARGO_AUTH}" | grep TunnelSecret)" ]; then
      echo ${ARGO_AUTH} > ${FILE_PATH}/tunnel.json
      cat > ${FILE_PATH}/tunnel.yml << EOF
tunnel=$(echo "${ARGO_AUTH}" | cut -d\" -f12)
credentials-file: ${FILE_PATH}/tunnel.json
protocol: http2

ingress:
  - hostname: ${ARGO_DOMAIN}
    service: http://localhost: ${V_PORT}
    originRequest:
      noTLSVerify: true
  - service: http_status:404
EOF
    else
      echo "ARGO_AUTH Mismatch TunnelSecret" > /dev/null
    fi
  }

  args() {
    if [ -e "${FILE_PATH}/argo" ]; then
      if [ -n "$(echo "${ARGO_AUTH}" | grep '^[A-Z0-9a-z=]\{120,250\}$')" ]; then
        args="tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${ARGO_AUTH}"
      elif [ -n "$(echo "${ARGO_AUTH}" | grep TunnelSecret)" ]; then
        args="tunnel --edge-ip-version auto --config ${FILE_PATH}/tunnel.yml run"
      else
        args="tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile ${FILE_PATH}/boot.log --loglevel info --url http://localhost:${V_PORT}"
      fi
    fi
  }

  if [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ]; then
    nezhacfg() {
      tlsPorts=("443" "8443" "2096" "2087" "2083" "2053")
      case "${NEZHA_VERSION}" in
        "V0" )
          if [[ " ${tlsPorts[@]} " =~ " ${NEZHA_PORT} " ]]; then
            NEZHA_TLS="--tls"
          else
            NEZHA_TLS=""
          fi
          ;;
        "V1" )
          if [[ " ${tlsPorts[@]} " =~ " ${NEZHA_PORT} " ]]; then
            NEZHA_TLS="true"
          else
            NEZHA_TLS="false"
          fi
          cat > ${FILE_PATH}/config.yml << ABC
client_secret: $NEZHA_KEY
debug: false
disable_auto_update: true
disable_command_execute: false
disable_force_update: true
disable_nat: false
disable_send_query: false
gpu: false
insecure_tls: false
ip_report_period: 1800
report_delay: 4
server: $NEZHA_SERVER:$NEZHA_PORT
skip_connection_count: false
skip_procs_count: false
temperature: false
tls: $NEZHA_TLS
use_gitee_to_upgrade: false
use_ipv6_country_code: false
uuid: $UUID
ABC
          ;;
      esac
    }
    nezhacfg
  fi

  generate_config
  argo_type
  args
}

# run
run_argo() {
  ${FILE_PATH}/${argo_randomness} ${args} >/dev/null 2>&1 &
}

run_web() {
  ${FILE_PATH}/${web_randomness} run -C ${FILE_PATH}/sconf >/dev/null 2>&1 &
}

run_npm() {
  case "${NEZHA_VERSION}" in
    "V0" )
      ${FILE_PATH}/${npm_randomness} -s ${NEZHA_SERVER}:${NEZHA_PORT} -p ${NEZHA_KEY} ${NEZHA_TLS} --report-delay=4 --skip-conn --skip-procs --disable-auto-update >/dev/null 2>&1 &
      ;;
    "V1" )
      ${FILE_PATH}/${npm_randomness} -c ${FILE_PATH}/config.yml >/dev/null 2>&1 &
      ;;
  esac
}

Detect_process() {
  local process_name="$1"
  local pids=""
  if command -v pidof >/dev/null 2>&1; then
    pids=$(pidof "$process_name" 2>/dev/null)
  elif command -v ps >/dev/null 2>&1; then
    pids=$(pgrep -x "$process_name" 2>/dev/null)
  elif command -v pgrep >/dev/null 2>&1; then
    pids=$(ps -eo pid,comm | awk -v name="$process_name" '$2 == name {print $1}')
  fi
  [ -n "$pids" ] && echo "$pids"
}

keep_alive() {
  while true; do
    if [ -e "${FILE_PATH}/${argo_randomness}" ] && [ ${OPENSERVER} -eq 1 ] && [ -n "${V_PORT}" ] && [ -z "$(Detect_process "${argo_randomness}")" ]; then
      run_argo
    fi
    sleep 5
    if [ -e "${FILE_PATH}/${web_randomness}" ] && [ -z "$(Detect_process "${web_randomness}")" ]; then
      run_web
    fi
    sleep 5
    if [ -e "${FILE_PATH}/${npm_randomness}" ] && [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ] && [ -z "$(Detect_process "${npm_randomness}")" ]; then
      run_npm
    fi
    sleep 50
  done
}

run_processes() {
  argo_randomness=tmp$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 3)
  web_randomness=tmp$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 3)
  npm_randomness=tmp$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 3)

  if [ ${OPENSERVER} -eq 1 ] && [ -n "${V_PORT}" ] && [ -e "${FILE_PATH}/argo" ]; then
    mv ${FILE_PATH}/argo ${FILE_PATH}/${argo_randomness} && sleep 1
    run_argo
    red "argo is running !"
    sleep 5
  fi
  if [ -e "${FILE_PATH}/web" ]; then
    mv ${FILE_PATH}/web ${FILE_PATH}/${web_randomness} && sleep 1
    run_web
    red "web is running !"
    sleep 1
  fi
  if [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ] && [ -e "${FILE_PATH}/npm" ]; then
    mv ${FILE_PATH}/npm ${FILE_PATH}/${npm_randomness} && sleep 1
    run_npm
    red "npm is running !"
    sleep 1
  fi

  check_hostname_change && sleep 2
  purple "ARGO_DOMAIN: $ARGO_DOMAIN"
  if [ -n "$SUB_URL" ]; then
    upload >/dev/null 2>&1 &
  else
    build_urls
  fi

  sleep 3
  purple "\nvps节点链接如下：\n"
  cat ${FILE_PATH}/tmp.txt

  if [ "${KEEPALIVE}" -eq 1 ]; then
    keep_alive 2>&1 &
  elif [ "${KEEPALIVE}" -eq 0 ]; then
    sleep 5
    rm -rf ${FILE_PATH}/${server_randomness} ${FILE_PATH}/${web_randomness} ${FILE_PATH}/${npm_randomness} ${FILE_PATH}/sconf ${FILE_PATH}/*.yml ${FILE_PATH}/tunnel.* ${FILE_PATH}/cert.pem ${FILE_PATH}/private.key
  fi
}

# get IP and country
get_ip_country_code() {
  if [ -z "$SERVER_IP" ]; then
    SERVER_IP=$(curl -s https://speed.cloudflare.com/meta | tr ',' '\n' | grep -E '"clientIp"\s*:\s*"' | sed 's/.*"clientIp"\s*:\s*"\([^"]*\)".*/\1/')
  fi

  if [[ ! "$SERVER_IP" =~ : ]]; then
    export MYIP="$SERVER_IP"
    purple "服务器ipv4地址是: $SERVER_IP"
  else
    export MYIP="[$SERVER_IP]"
    purple "服务器ipv6地址是: $SERVER_IP"
  fi

  export ISP=$(curl -s https://speed.cloudflare.com/meta | awk -F\" '{print $26"-"$18}' | sed -e 's/ /_/g')
  purple "服务器所在地区: ${ISP}"
}

# general_upload_data
general_upload_data() {
  UPLOAD_DATA=""
  if [ -n "${LOCAL_DOMAIN}" ]; then
    export MYIP="${LOCAL_DOMAIN}"
  fi
  if [ -n "${V_PORT}" ]; then
    if [ -n "${MY_DOMAIN}" ] && [ -z "${ARGO_DOMAIN}" ]; then
      export ARGO_DOMAIN="${MY_DOMAIN}"
    fi
    export vless_url="vless://${UUID}@${CF_IP}:${CFPORT}?host=${ARGO_DOMAIN}&path=%2F${VLPATH}%3Fed%3D2560&type=ws&encryption=none&security=tls&sni=${ARGO_DOMAIN}#${ISP}-${SUB_NAME}"
    UPLOAD_DATA="${vless_url}"
  fi

  if [ -n "${HY2_PORT}" ]; then
    export hysteria_url="hysteria2://${UUID}@${MYIP}:${HY2_PORT}/?sni=www.bing.com&alpn=h3&insecure=1#${ISP}-${SUB_NAME}"
    UPLOAD_DATA="${UPLOAD_DATA}\n${hysteria_url}"
  fi
  if [ -n "${TUIC_PORT}" ]; then
    export tuic_url="tuic://${UUID}:${tuicpass}@${MYIP}:${TUIC_PORT}?sni=www.bing.com&congestion_control=bbr&udp_relay_mode=native&alpn=h3&allow_insecure=1#${ISP}-${SUB_NAME}"
    UPLOAD_DATA="${UPLOAD_DATA}\n${tuic_url}"
  fi
  if [ -n "${REAL_PORT}" ]; then
    export reality_url="vless://${UUID}@${MYIP}:${REAL_PORT}?encryption=none&flow=xtls-rprx-vision&security=reality&sni=${SNI}&fp=chrome&pbk=${public_key}&type=tcp&headerType=none#${ISP}-${SUB_NAME}-realitytcp"
    UPLOAD_DATA="${UPLOAD_DATA}\n${reality_url}"
  fi
  if [ -n "${SOCKS_PORT}" ]; then
    BASE64_CREDENTIALS=$(echo -n "${SOCKS_USER}:${SOCKS_PASS}" | base64)
    export socks5_url="socks://${BASE64_CREDENTIALS}@${MYIP}:${SOCKS_PORT}#${ISP}-${SUB_NAME}"
    UPLOAD_DATA="${UPLOAD_DATA}\n${socks5_url}"
  fi
  if [ -n "${ANYTLS_PORT}" ]; then
    export anytls_url="anytls://${UUID}@${MYIP}:${ANYTLS_PORT}?insecure=1&udp=1#${ISP}-${SUB_NAME}"
    UPLOAD_DATA="${UPLOAD_DATA}\n${anytls_url}"
  fi
  export UPLOAD_DATA
}

# check_hostname
check_hostname_change() {
  if [ -s "${FILE_PATH}/boot.log" ]; then
    export ARGO_DOMAIN=$(cat ${FILE_PATH}/boot.log | grep -o "info.*https://.*trycloudflare.com" | sed "s@.*https://@@g" | tail -n 1)
  fi
  general_upload_data
}

# build_urls
build_urls() {
  if [ -n "${UPLOAD_DATA}" ]; then
    echo -e "${UPLOAD_DATA}" > "${FILE_PATH}/tmp.txt"
  fi
}

# upload
upload_subscription() {
  if command -v curl &> /dev/null; then
    response=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"URL_NAME\":\"$SUB_NAME\",\"URL\":\"$UPLOAD_DATA\"}" $SUB_URL)
  elif command -v wget &> /dev/null; then
    response=$(wget -qO- --post-data="{\"URL_NAME\":\"$SUB_NAME\",\"URL\":\"$UPLOAD_DATA\"}" --header="Content-Type: application/json" $SUB_URL)
  fi
}

export previousargoDomain=""
upload() {
  if [ ${KEEPALIVE} -eq 1 ] && [ ${OPENSERVER} -eq 1 ] && [ -z "${ARGO_AUTH}" ]; then
    while true; do
      if [[ "$previousargoDomain" == "$ARGO_DOMAIN" ]]; then
        echo "domain name has not been updated, no need to upload" > /dev/null
      else
        upload_subscription
        build_urls
        export previousargoDomain="$ARGO_DOMAIN"
      fi
      sleep 60
      check_hostname_change && sleep 2
    done
  else
    upload_subscription
    build_urls
  fi
}

# install_singbox
install_singbox() {
  pkill sleep
  pkill tmp
  createfolder
  cleanup_files
  initialize_downloads
  get_ip_country_code
  my_config
  run_processes
}

# remove_singbox
remove_singbox() {
  pkill sleep
  pkill tmp
  rm -rf ${FILE_PATH}
  pkill bash
}

menu(){
yellow "1、安装singbox临时节点"
yellow " "
yellow "2、御载singbox临时节点"
yellow " "
yellow "0、退出脚本"
yellow " "
read -p " 请输入数字 [0-2]: " num
case "$num" in
    1)
    install_singbox
    ;;
    2)
    remove_singbox
    ;;
    0)
    exit 1
    ;;
    *)
    clear
    echo -e "${Error}:请输入正确数字 [1-2]"
    sleep 5s
    menu
    ;;
esac
}
menu
