#!/bin/bash

red="\033[1;91m"
yellow="\e[1;33m"
purple="\e[1;35m"
red() { echo -e "\e[1;91m$1\033[0m"; }
yellow() { echo -e "\e[1;33m$1\033[0m"; }
purple() { echo -e "\e[1;35m$1\033[0m"; }

export CFPORT=${CFPORT:-'443'}
export CF_IP=${CF_IP:-'ip.sb'}
export FILE_PATH=${FILE_PATH:-'./.tmp'}
export openkeepalive=${openkeepalive:-'1'}
export V_PORT=${V_PORT:-'8080'}
export VLESS_WSPATH=${VLESS_WSPATH:-'startvl'}

export SUB_URL=${SUB_URL:-''}
export SUB_NAME=${SUB_NAME:-''}

export UUID=${UUID:-'7160b696-dd5e-42e3-a024-145e92cec916'}
export NEZHA_VERSION=${NEZHA_VERSION:-'V0'}
export NEZHA_SERVER=${NEZHA_SERVER:-''}
export NEZHA_KEY=${NEZHA_KEY:-''}
export NEZHA_PORT=${NEZHA_PORT:-'443'}

export ARGO_DOMAIN=${ARGO_DOMAIN:-''}
export ARGO_AUTH=${ARGO_AUTH:-''}

# 建立运行目录
createfolder() {
  if [ ! -d "$FILE_PATH" ]; then
    mkdir -p "${FILE_PATH}"
  fi
}

# 清理历史文件
cleanup_files() {
  rm -rf ${FILE_PATH}/*
}

# 设置下载
download_program() {
  local program_name="$1"
  local default_url="$2"
  local x64_url="$3"

  local download_url
  case "$(uname -m)" in
    x86_64|amd64|x64)
      download_url="${x64_url}"
      ;;
    *)
      download_url="${default_url}"
      ;;
  esac

  if [ ! -f "${program_name}" ]; then
    if [ -n "${download_url}" ]; then
      echo "Downloading ${program_name}..." > /dev/null
      if command -v curl &> /dev/null; then
        curl -sSL "${download_url}" -o "${program_name}"
      elif command -v wget &> /dev/null; then
        wget -qO "${program_name}" "${download_url}"
      fi
      echo "Downloaded ${program_name}" > /dev/null
    else
      echo "Skipping download for ${program_name}" > /dev/null
    fi
  else
    echo "${program_name} already exists, skipping download" > /dev/null
  fi
}

initialize_downloads() {
  if [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ]; then
    case "${NEZHA_VERSION}" in
      "V0" )
        download_program "${FILE_PATH}/npm" "https://github.com/kahunama/myfile/releases/download/main/nezha-agent_arm" "https://github.com/kahunama/myfile/releases/download/main/nezha-agent"
        ;;
      "V1" )
        download_program "${FILE_PATH}/npm" "https://github.com/mytcgd/myfiles/releases/download/main/nezha-agentv1_arm" "https://github.com/mytcgd/myfiles/releases/download/main/nezha-agentv1"
        ;;
    esac
    sleep 3
    chmod +x ${FILE_PATH}/npm
  fi

  download_program "${FILE_PATH}/web" "https://github.com/mytcgd/myfiles/releases/download/main/xray_arm" "https://github.com/mytcgd/myfiles/releases/download/main/xray"
  sleep 3
  chmod +x ${FILE_PATH}/web

  download_program "${FILE_PATH}/argo" "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64" "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
  sleep 3
  chmod +x ${FILE_PATH}/argo
}

# my_config
my_config() {
  generate_config() {
  cat > ${FILE_PATH}/out.json << EOF
{
    "log": {
        "access": "/dev/null",
        "error": "/dev/null",
        "loglevel": "none"
    },
    "dns": {
        "servers": [
            "https+local://8.8.8.8/dns-query"
        ]
    },
    "inbounds": [
        {
            "port": ${V_PORT},
            "listen": "::",
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "${UUID}",
                        "level": 0
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "ws",
                "security": "none",
                "wsSettings": {
                    "path": "/${VLESS_WSPATH}"
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "quic"
                ],
                "metadataOnly": false
            }
        }
    ],
    "outbounds": [
        {
            "tag": "direct",
            "protocol": "freedom"
        },
        {
            "tag": "block",
            "protocol": "blackhole"
        }
    ]
}
EOF
  }

  argo_type() {
    if [ -e "${FILE_PATH}/argo" ] && [ -z "${ARGO_AUTH}" ] && [ -z "${ARGO_DOMAIN}" ]; then
      echo "ARGO_AUTH or ARGO_DOMAIN is empty, use Quick Tunnels" > /dev/null
      return
    fi

    if [ -e "${FILE_PATH}/argo" ] && [ -n "$(echo "${ARGO_AUTH}" | grep TunnelSecret)" ]; then
      echo ${ARGO_AUTH} > ${FILE_PATH}/tunnel.json
      cat > ${FILE_PATH}/tunnel.yml << EOF
tunnel=$(echo "${ARGO_AUTH}" | cut -d\" -f12)
credentials-file: ${FILE_PATH}/tunnel.json
protocol: http2

ingress:
  - hostname: ${ARGO_DOMAIN}
    service: http://localhost: ${V_PORT}
    originRequest:
      noTLSVerify: true
  - service: http_status:404
EOF
    else
      echo "ARGO_AUTH Mismatch TunnelSecret" > /dev/null
    fi
  }

  args() {
    if [ -e "${FILE_PATH}/argo" ]; then
      if [ -n "$(echo "${ARGO_AUTH}" | grep '^[A-Z0-9a-z=]\{120,250\}$')" ]; then
        args="tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${ARGO_AUTH}"
      elif [ -n "$(echo "${ARGO_AUTH}" | grep TunnelSecret)" ]; then
        args="tunnel --edge-ip-version auto --config ${FILE_PATH}/tunnel.yml run"
      else
        args="tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile ${FILE_PATH}/boot.log --loglevel info --url http://localhost:${V_PORT}"
      fi
    fi
  }

  if [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ]; then
    nezhacfg() {
      tlsPorts=("443" "8443" "2096" "2087" "2083" "2053")
      case "${NEZHA_VERSION}" in
        "V0" )
          if [[ " ${tlsPorts[@]} " =~ " ${NEZHA_PORT} " ]]; then
            NEZHA_TLS="--tls"
          else
            NEZHA_TLS=""
          fi
          ;;
        "V1" )
          if [[ " ${tlsPorts[@]} " =~ " ${NEZHA_PORT} " ]]; then
            NEZHA_TLS="true"
          else
            NEZHA_TLS="false"
          fi
          cat > ${FILE_PATH}/config.yml << ABC
client_secret: $NEZHA_KEY
debug: false
disable_auto_update: true
disable_command_execute: false
disable_force_update: true
disable_nat: false
disable_send_query: false
gpu: false
insecure_tls: false
ip_report_period: 1800
report_delay: 4
server: $NEZHA_SERVER:$NEZHA_PORT
skip_connection_count: false
skip_procs_count: false
temperature: false
tls: $NEZHA_TLS
use_gitee_to_upgrade: false
use_ipv6_country_code: false
uuid: $UUID
ABC
          ;;
      esac
    }
    nezhacfg
  fi

  generate_config
  argo_type
  args
}

# run
run_argo() {
  ${FILE_PATH}/${argo_randomness} ${args} >/dev/null 2>&1 &
}

run_web() {
  ${FILE_PATH}/${web_randomness} run -c ${FILE_PATH}/out.json >/dev/null 2>&1 &
}

run_npm() {
  case "${NEZHA_VERSION}" in
    "V0" )
      ${FILE_PATH}/${npm_randomness} -s ${NEZHA_SERVER}:${NEZHA_PORT} -p ${NEZHA_KEY} ${NEZHA_TLS} --report-delay=4 --skip-conn --skip-procs --disable-auto-update >/dev/null 2>&1 &
      ;;
    "V1" )
      ${FILE_PATH}/${npm_randomness} -c ${FILE_PATH}/config.yml >/dev/null 2>&1 &
      ;;
  esac
}

Detect_process() {
  local process_name="$1"
  local pids=""
  if command -v pidof >/dev/null 2>&1; then
    pids=$(pidof "$process_name" 2>/dev/null)
  elif command -v ps >/dev/null 2>&1; then
    pids=$(ps -eo pid,comm | awk -v name="$process_name" '$2 == name {print $1}')
  elif command -v pgrep >/dev/null 2>&1; then
    pids=$(pgrep -f "$process_name" 2>/dev/null)
  fi

  [ -n "$pids" ] && echo "$pids"
}

keep_alive() {
  while true; do
    if [ -e "${FILE_PATH}/${argo_randomness}" ] && [ -z "$(Detect_process "${argo_randomness}")" ]; then
      run_argo
      sleep 5
      check_hostname_change
      # build_urls
    fi
    sleep 5
    if [ -e "${FILE_PATH}/${web_randomness}" ] && [ -z "$(Detect_process "${web_randomness}")" ]; then
      run_web
    fi
    sleep 5
    if [ -e "${FILE_PATH}/${npm_randomness}" ] && [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ] && [ -z "$(Detect_process "${npm_randomness}")" ]; then
      run_npm
    fi
    sleep 50
  done
}

upload() {
  if [ ! -s "${FILE_PATH}/boot.log" ]; then
    upload_subscription
  else
    while true; do
      upload_subscription
      sleep 50
      check_hostname_change
      # build_urls
      sleep 50
    done
  fi
}

run_processes() {
  argo_randomness=tmp$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 3)
  web_randomness=tmp$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 3)
  npm_randomness=tmp$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 3)

  if [ -e "${FILE_PATH}/argo" ]; then
    mv ${FILE_PATH}/argo ${FILE_PATH}/${argo_randomness} && sleep 1
    run_argo
    red "argo is running !"
    sleep 5
  fi
  if [ -e "${FILE_PATH}/web" ]; then
    mv ${FILE_PATH}/web ${FILE_PATH}/${web_randomness} && sleep 1
    run_web
    red "web is running !"
    sleep 1
  fi
  if [ -n "${NEZHA_SERVER}" ] && [ -n "${NEZHA_KEY}" ] && [ -e "${FILE_PATH}/npm" ]; then
    mv ${FILE_PATH}/npm ${FILE_PATH}/${npm_randomness} && sleep 1
    run_npm
    red "npm is running !"
    sleep 1
  fi

  check_hostname_change && sleep 1
  build_urls && sleep 2
  purple "ARGO_DOMAIN: $ARGO_DOMAIN"

  purple "\nvps节点链接如下：\n"
  cat ${FILE_PATH}/tmp.txt

  if [ -n "$SUB_URL" ]; then
    upload >/dev/null 2>&1 &
  fi

  case "$openkeepalive" in
    1)
      keep_alive 2>&1 &
      ;;
  esac
}

# get IP and country
get_ip_country_code() {
  export SERVER_IP=$(curl -s https://speed.cloudflare.com/meta | tr ',' '\n' | grep -E '"clientIp"\s*:\s*"' | sed 's/.*"clientIp"\s*:\s*"\([^"]*\)".*/\1/')
  purple "服务器IP地址: ${SERVER_IP}"

  export ISP=$(curl -s https://speed.cloudflare.com/meta | awk -F\" '{print $26"-"$18}' | sed -e 's/ /_/g')
  purple "服务器所在地区: ${ISP}"
}

# check_hostname
check_hostname_change() {
  if [ -s "${FILE_PATH}/boot.log" ]; then
    export ARGO_DOMAIN=$(cat ${FILE_PATH}/boot.log | grep -o "info.*https://.*trycloudflare.com" | sed "s@.*https://@@g" | tail -n 1)
  fi
  export vless_url="vless://${UUID}@${CF_IP}:${CFPORT}?host=${ARGO_DOMAIN}&path=%2F${VLESS_WSPATH}%3Fed%3D2048&type=ws&encryption=none&security=tls&sni=${ARGO_DOMAIN}#${ISP}-${SUB_NAME}"
  export UPLOAD_DATA="$vless_url"
}

# build_urls
build_urls() {
  cat > ${FILE_PATH}/tmp.txt << DEF
$vless_url
DEF
}

# upload
upload_subscription() {
  if command -v curl &> /dev/null; then
    response=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"URL_NAME\":\"$SUB_NAME\",\"URL\":\"$UPLOAD_DATA\"}" $SUB_URL)
  elif command -v wget &> /dev/null; then
    response=$(wget -qO- --post-data="{\"URL_NAME\":\"$SUB_NAME\",\"URL\":\"$UPLOAD_DATA\"}" --header="Content-Type: application/json" $SUB_URL)
  fi
}

# install_xray
install_xray() {
  pkill sleep
  pkill tmp
  createfolder
  cleanup_files
  initialize_downloads
  get_ip_country_code
  my_config
  run_processes
}

# remove_xray
remove_xray() {
  pkill sleep
  pkill tmp
  rm -rf ${FILE_PATH}
  pkill bash
}

menu(){
yellow "1、安装xray_argo临时节点"
yellow " "
yellow "2、御载xray_argo临时节点"
yellow " "
yellow "0、退出脚本"
yellow " "
read -p " 请输入数字 [0-2]: " num
case "$num" in
    1)
    install_xray
    ;;
    2)
    remove_xray
    ;;
    0)
    exit 1
    ;;
    *)
    clear
    echo -e "${Error}:请输入正确数字 [1-2]"
    sleep 5s
    menu
    ;;
esac
}
menu
